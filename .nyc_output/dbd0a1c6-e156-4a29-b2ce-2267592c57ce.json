{"/home/usuario/dsi/practica7/src/alimento.ts":{"path":"/home/usuario/dsi/practica7/src/alimento.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"2":{"start":{"line":18,"column":8},"end":{"line":18,"column":45}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":29}},"5":{"start":{"line":21,"column":8},"end":{"line":21,"column":33}},"6":{"start":{"line":22,"column":8},"end":{"line":22,"column":29}},"7":{"start":{"line":23,"column":8},"end":{"line":23,"column":27}},"8":{"start":{"line":30,"column":8},"end":{"line":30,"column":35}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":27}},"10":{"start":{"line":44,"column":8},"end":{"line":44,"column":27}},"11":{"start":{"line":51,"column":8},"end":{"line":51,"column":29}},"12":{"start":{"line":58,"column":8},"end":{"line":58,"column":27}},"13":{"start":{"line":65,"column":8},"end":{"line":65,"column":26}},"14":{"start":{"line":68,"column":0},"end":{"line":68,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":73},"end":{"line":24,"column":5}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":24},"end":{"line":31,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":16},"end":{"line":38,"column":5}},"line":36},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":16},"end":{"line":45,"column":5}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":18},"end":{"line":52,"column":5}},"line":50},"5":{"name":"(anonymous_5)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":25},"end":{"line":59,"column":5}},"line":57},"6":{"name":"(anonymous_6)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":15},"end":{"line":66,"column":5}},"line":64}},"branchMap":{},"s":{"0":1,"1":1,"2":42,"3":42,"4":42,"5":42,"6":42,"7":42,"8":1,"9":58,"10":1,"11":1,"12":415,"13":10,"14":1},"f":{"0":42,"1":1,"2":58,"3":1,"4":1,"5":415,"6":10},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practica7/src/alimento.ts","sources":["/home/usuario/dsi/practica7/src/alimento.ts"],"names":[],"mappings":";;;AAkBA;;GAEG;AACH,MAAa,QAAQ;IAEnB;;;;;;;;OAQG;IACH,YAAoB,cAAsB,EAAU,MAAc,EAAU,MAAc,EAClF,QAAgB,EAAU,MAAuB,EAAU,KAAY;QAD3D,mBAAc,GAAd,cAAc,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAQ;QAClF,aAAQ,GAAR,QAAQ,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAiB;QAAU,UAAK,GAAL,KAAK,CAAO;IAAG,CAAC;IAEnF;;;OAGG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,kBAAkB;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AA7DD,4BA6DC","sourcesContent":["/**\n * Tipo de datos Macronutrientes. Servirá como composición nutricional de los alimentos.\n * @param carbohidratos Cantidad de hidratos de carbono por cada 100 gr que posee el alimento.\n * @param proteinas Cantidad de proteínas por cada 100 gr que posee el alimento.\n * @param lipidos Cantidad de lípidos por cada 100 gr de carbono que posee el alimento.\n */\nexport type Macronutrientes = {\n  carbohidratos: number,\n  proteinas: number,\n  lipidos: number\n}\n\n/**\n * Tipo de datos Grupo. Es el grupo de alimentos al que pertenece el alimento.\n */\nexport type Grupo = 'CARNES' | 'PESCADOS' | 'HUEVOS' | 'TOFU' | 'FRUTOS_SECOS' | 'SEMILLAS' | 'LEGUMBRES' |\n'VERDURAS' | 'HORTALIZAS' | 'LACTEOS' | 'CEREALES' | 'FRUTAS' | 'PROCESADOS';\n\n/**\n * Esta es la clase Alimento.\n */\nexport class Alimento {\n  \n  /**\n   * Constructor de la clase Alimento\n   * @param nombreAlimento Nombre del alimento en cuestión.\n   * @param precio Precio del alimento.\n   * @param origen Localización de origen del alimento (país, ciudad, etc.).\n   * @param calorias Kilocalorías por 100 gramos de dicho alimento.\n   * @param macros Los macronutrientes que posee el alimento por cada 100 gr(carbohidratos, protínas y lípidos).\n   * @param grupo Grupo de alimentos al que pertenece el alimento.\n   */\n  constructor(private nombreAlimento: string, private precio: number, private origen: string,\n  private calorias: number, private macros: Macronutrientes, private grupo: Grupo) {}\n\n  /**\n   * Obtiene el nombre del alimento.\n   * @returns Nombre del alimento.\n   */\n  getNombreAlimento() {\n    return this.nombreAlimento;\n  }\n\n  /**\n   * Obtiene el precio por Kg (en euros).\n   * @returns Precio del alimento por Kg.\n   */\n  getPrecio() {\n    return this.precio;\n  }\n\n  /**\n   * Obtiene el origen del alimento.\n   * @returns Origen del alimento.\n   */\n  getOrigen() {\n    return this.origen;\n  }\n\n  /**\n   * Obtiene kilocalorías (kcal) por 100 gr de dicho alimento.\n   * @returns kcal del alimento.\n   */\n  getCalorias() {\n    return this.calorias;\n  }\n\n  /**\n   * Obtiene los macronutrientes del alimento por 100 gr.\n   * @returns Macronutrientes del alimento.\n   */\n  getMacronutrientes() {\n    return this.macros;\n  }\n\n  /**\n   * Obtiene el grupo del alimento\n   * @returns Grupo del alimento.\n   */\n  getGrupo() {\n    return this.grupo;\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ecb5400302177de38b1b65cc6ddb0a2bea0d2867","contentHash":"737f19f1188b67915f028f498c0f9152813ea82e2f38b1a96bc447229c1b203f"},"/home/usuario/dsi/practica7/src/plato.ts":{"path":"/home/usuario/dsi/practica7/src/plato.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":9,"column":8},"end":{"line":9,"column":39}},"3":{"start":{"line":10,"column":8},"end":{"line":10,"column":35}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"5":{"start":{"line":17,"column":8},"end":{"line":17,"column":24}},"6":{"start":{"line":18,"column":8},"end":{"line":18,"column":67}},"7":{"start":{"line":19,"column":8},"end":{"line":19,"column":43}},"8":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"9":{"start":{"line":33,"column":8},"end":{"line":33,"column":30}},"10":{"start":{"line":40,"column":8},"end":{"line":40,"column":30}},"11":{"start":{"line":47,"column":8},"end":{"line":47,"column":42}},"12":{"start":{"line":54,"column":8},"end":{"line":54,"column":27}},"13":{"start":{"line":61,"column":24},"end":{"line":61,"column":70}},"14":{"start":{"line":62,"column":8},"end":{"line":67,"column":11}},"15":{"start":{"line":64,"column":12},"end":{"line":64,"column":108}},"16":{"start":{"line":65,"column":12},"end":{"line":65,"column":96}},"17":{"start":{"line":66,"column":12},"end":{"line":66,"column":100}},"18":{"start":{"line":68,"column":8},"end":{"line":68,"column":25}},"19":{"start":{"line":75,"column":24},"end":{"line":75,"column":25}},"20":{"start":{"line":76,"column":8},"end":{"line":80,"column":11}},"21":{"start":{"line":77,"column":27},"end":{"line":77,"column":50}},"22":{"start":{"line":78,"column":32},"end":{"line":78,"column":61}},"23":{"start":{"line":79,"column":12},"end":{"line":79,"column":37}},"24":{"start":{"line":81,"column":8},"end":{"line":81,"column":25}},"25":{"start":{"line":89,"column":8},"end":{"line":163,"column":11}},"26":{"start":{"line":90,"column":26},"end":{"line":90,"column":48}},"27":{"start":{"line":91,"column":36},"end":{"line":91,"column":72}},"28":{"start":{"line":92,"column":12},"end":{"line":161,"column":13}},"29":{"start":{"line":94,"column":20},"end":{"line":94,"column":43}},"30":{"start":{"line":95,"column":20},"end":{"line":96,"column":40}},"31":{"start":{"line":96,"column":24},"end":{"line":96,"column":40}},"32":{"start":{"line":97,"column":20},"end":{"line":97,"column":26}},"33":{"start":{"line":99,"column":20},"end":{"line":99,"column":43}},"34":{"start":{"line":100,"column":20},"end":{"line":101,"column":42}},"35":{"start":{"line":101,"column":24},"end":{"line":101,"column":42}},"36":{"start":{"line":102,"column":20},"end":{"line":102,"column":26}},"37":{"start":{"line":104,"column":20},"end":{"line":104,"column":43}},"38":{"start":{"line":105,"column":20},"end":{"line":106,"column":40}},"39":{"start":{"line":106,"column":24},"end":{"line":106,"column":40}},"40":{"start":{"line":107,"column":20},"end":{"line":107,"column":26}},"41":{"start":{"line":109,"column":20},"end":{"line":109,"column":43}},"42":{"start":{"line":110,"column":20},"end":{"line":111,"column":38}},"43":{"start":{"line":111,"column":24},"end":{"line":111,"column":38}},"44":{"start":{"line":112,"column":20},"end":{"line":112,"column":26}},"45":{"start":{"line":114,"column":20},"end":{"line":114,"column":43}},"46":{"start":{"line":115,"column":20},"end":{"line":116,"column":46}},"47":{"start":{"line":116,"column":24},"end":{"line":116,"column":46}},"48":{"start":{"line":117,"column":20},"end":{"line":117,"column":26}},"49":{"start":{"line":119,"column":20},"end":{"line":119,"column":43}},"50":{"start":{"line":120,"column":20},"end":{"line":121,"column":42}},"51":{"start":{"line":121,"column":24},"end":{"line":121,"column":42}},"52":{"start":{"line":122,"column":20},"end":{"line":122,"column":26}},"53":{"start":{"line":124,"column":20},"end":{"line":124,"column":43}},"54":{"start":{"line":125,"column":20},"end":{"line":126,"column":43}},"55":{"start":{"line":126,"column":24},"end":{"line":126,"column":43}},"56":{"start":{"line":127,"column":20},"end":{"line":127,"column":26}},"57":{"start":{"line":129,"column":20},"end":{"line":129,"column":43}},"58":{"start":{"line":130,"column":20},"end":{"line":131,"column":42}},"59":{"start":{"line":131,"column":24},"end":{"line":131,"column":42}},"60":{"start":{"line":132,"column":20},"end":{"line":132,"column":26}},"61":{"start":{"line":134,"column":20},"end":{"line":134,"column":43}},"62":{"start":{"line":135,"column":20},"end":{"line":136,"column":44}},"63":{"start":{"line":136,"column":24},"end":{"line":136,"column":44}},"64":{"start":{"line":137,"column":20},"end":{"line":137,"column":26}},"65":{"start":{"line":139,"column":20},"end":{"line":139,"column":43}},"66":{"start":{"line":140,"column":20},"end":{"line":141,"column":41}},"67":{"start":{"line":141,"column":24},"end":{"line":141,"column":41}},"68":{"start":{"line":142,"column":20},"end":{"line":142,"column":26}},"69":{"start":{"line":144,"column":20},"end":{"line":144,"column":44}},"70":{"start":{"line":145,"column":20},"end":{"line":146,"column":42}},"71":{"start":{"line":146,"column":24},"end":{"line":146,"column":42}},"72":{"start":{"line":147,"column":20},"end":{"line":147,"column":26}},"73":{"start":{"line":149,"column":20},"end":{"line":149,"column":44}},"74":{"start":{"line":150,"column":20},"end":{"line":151,"column":40}},"75":{"start":{"line":151,"column":24},"end":{"line":151,"column":40}},"76":{"start":{"line":152,"column":20},"end":{"line":152,"column":26}},"77":{"start":{"line":154,"column":20},"end":{"line":154,"column":44}},"78":{"start":{"line":155,"column":20},"end":{"line":156,"column":44}},"79":{"start":{"line":156,"column":24},"end":{"line":156,"column":44}},"80":{"start":{"line":157,"column":20},"end":{"line":157,"column":26}},"81":{"start":{"line":159,"column":20},"end":{"line":159,"column":80}},"82":{"start":{"line":160,"column":20},"end":{"line":160,"column":26}},"83":{"start":{"line":162,"column":12},"end":{"line":162,"column":25}},"84":{"start":{"line":166,"column":0},"end":{"line":166,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":51},"end":{"line":20,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":21},"end":{"line":27,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":19},"end":{"line":34,"column":5}},"line":32},"3":{"name":"(anonymous_3)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":19},"end":{"line":41,"column":5}},"line":39},"4":{"name":"(anonymous_4)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":30},"end":{"line":48,"column":5}},"line":46},"5":{"name":"(anonymous_5)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":16},"end":{"line":55,"column":5}},"line":53},"6":{"name":"(anonymous_6)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":29},"end":{"line":69,"column":5}},"line":60},"7":{"name":"(anonymous_7)","decl":{"start":{"line":62,"column":31},"end":{"line":62,"column":32}},"loc":{"start":{"line":62,"column":45},"end":{"line":67,"column":9}},"line":62},"8":{"name":"(anonymous_8)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":20},"end":{"line":82,"column":5}},"line":74},"9":{"name":"(anonymous_9)","decl":{"start":{"line":76,"column":31},"end":{"line":76,"column":32}},"loc":{"start":{"line":76,"column":45},"end":{"line":80,"column":9}},"line":76},"10":{"name":"(anonymous_10)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":31},"end":{"line":164,"column":5}},"line":88},"11":{"name":"(anonymous_11)","decl":{"start":{"line":89,"column":31},"end":{"line":89,"column":32}},"loc":{"start":{"line":89,"column":45},"end":{"line":163,"column":9}},"line":89}},"branchMap":{"0":{"loc":{"start":{"line":92,"column":12},"end":{"line":161,"column":13}},"type":"switch","locations":[{"start":{"line":93,"column":16},"end":{"line":97,"column":26}},{"start":{"line":98,"column":16},"end":{"line":102,"column":26}},{"start":{"line":103,"column":16},"end":{"line":107,"column":26}},{"start":{"line":108,"column":16},"end":{"line":112,"column":26}},{"start":{"line":113,"column":16},"end":{"line":117,"column":26}},{"start":{"line":118,"column":16},"end":{"line":122,"column":26}},{"start":{"line":123,"column":16},"end":{"line":127,"column":26}},{"start":{"line":128,"column":16},"end":{"line":132,"column":26}},{"start":{"line":133,"column":16},"end":{"line":137,"column":26}},{"start":{"line":138,"column":16},"end":{"line":142,"column":26}},{"start":{"line":143,"column":16},"end":{"line":147,"column":26}},{"start":{"line":148,"column":16},"end":{"line":152,"column":26}},{"start":{"line":153,"column":16},"end":{"line":157,"column":26}},{"start":{"line":158,"column":16},"end":{"line":160,"column":26}}],"line":92},"1":{"loc":{"start":{"line":95,"column":20},"end":{"line":96,"column":40}},"type":"if","locations":[{"start":{"line":95,"column":20},"end":{"line":96,"column":40}},{"start":{"line":95,"column":20},"end":{"line":96,"column":40}}],"line":95},"2":{"loc":{"start":{"line":100,"column":20},"end":{"line":101,"column":42}},"type":"if","locations":[{"start":{"line":100,"column":20},"end":{"line":101,"column":42}},{"start":{"line":100,"column":20},"end":{"line":101,"column":42}}],"line":100},"3":{"loc":{"start":{"line":105,"column":20},"end":{"line":106,"column":40}},"type":"if","locations":[{"start":{"line":105,"column":20},"end":{"line":106,"column":40}},{"start":{"line":105,"column":20},"end":{"line":106,"column":40}}],"line":105},"4":{"loc":{"start":{"line":110,"column":20},"end":{"line":111,"column":38}},"type":"if","locations":[{"start":{"line":110,"column":20},"end":{"line":111,"column":38}},{"start":{"line":110,"column":20},"end":{"line":111,"column":38}}],"line":110},"5":{"loc":{"start":{"line":115,"column":20},"end":{"line":116,"column":46}},"type":"if","locations":[{"start":{"line":115,"column":20},"end":{"line":116,"column":46}},{"start":{"line":115,"column":20},"end":{"line":116,"column":46}}],"line":115},"6":{"loc":{"start":{"line":120,"column":20},"end":{"line":121,"column":42}},"type":"if","locations":[{"start":{"line":120,"column":20},"end":{"line":121,"column":42}},{"start":{"line":120,"column":20},"end":{"line":121,"column":42}}],"line":120},"7":{"loc":{"start":{"line":125,"column":20},"end":{"line":126,"column":43}},"type":"if","locations":[{"start":{"line":125,"column":20},"end":{"line":126,"column":43}},{"start":{"line":125,"column":20},"end":{"line":126,"column":43}}],"line":125},"8":{"loc":{"start":{"line":130,"column":20},"end":{"line":131,"column":42}},"type":"if","locations":[{"start":{"line":130,"column":20},"end":{"line":131,"column":42}},{"start":{"line":130,"column":20},"end":{"line":131,"column":42}}],"line":130},"9":{"loc":{"start":{"line":135,"column":20},"end":{"line":136,"column":44}},"type":"if","locations":[{"start":{"line":135,"column":20},"end":{"line":136,"column":44}},{"start":{"line":135,"column":20},"end":{"line":136,"column":44}}],"line":135},"10":{"loc":{"start":{"line":140,"column":20},"end":{"line":141,"column":41}},"type":"if","locations":[{"start":{"line":140,"column":20},"end":{"line":141,"column":41}},{"start":{"line":140,"column":20},"end":{"line":141,"column":41}}],"line":140},"11":{"loc":{"start":{"line":145,"column":20},"end":{"line":146,"column":42}},"type":"if","locations":[{"start":{"line":145,"column":20},"end":{"line":146,"column":42}},{"start":{"line":145,"column":20},"end":{"line":146,"column":42}}],"line":145},"12":{"loc":{"start":{"line":150,"column":20},"end":{"line":151,"column":40}},"type":"if","locations":[{"start":{"line":150,"column":20},"end":{"line":151,"column":40}},{"start":{"line":150,"column":20},"end":{"line":151,"column":40}}],"line":150},"13":{"loc":{"start":{"line":155,"column":20},"end":{"line":156,"column":44}},"type":"if","locations":[{"start":{"line":155,"column":20},"end":{"line":156,"column":44}},{"start":{"line":155,"column":20},"end":{"line":156,"column":44}}],"line":155}},"s":{"0":1,"1":1,"2":17,"3":17,"4":17,"5":17,"6":17,"7":17,"8":22,"9":4,"10":22,"11":1,"12":4,"13":44,"14":44,"15":138,"16":138,"17":138,"18":44,"19":17,"20":17,"21":57,"22":57,"23":57,"24":17,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1},"f":{"0":17,"1":22,"2":4,"3":22,"4":1,"5":4,"6":44,"7":138,"8":17,"9":57,"10":0,"11":0},"b":{"0":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practica7/src/plato.ts","sources":["/home/usuario/dsi/practica7/src/plato.ts"],"names":[],"mappings":"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","sourcesContent":["import { Alimento } from \"./alimento\";\nimport { Macronutrientes } from \"./alimento\"\nimport { Grupo } from \"./alimento\";\n\n/**\n * Tipo de datos Categoria. Existen 4 categorías posibles: Entrante, \n * primer plato, segundo plato o postre\n */\nexport type Categoria = 'ENTRANTE' | 'PRIMERO' | 'SEGUNDO' | 'POSTRE';\n\n/*\n * Esta es la clase Plato.\n */\nexport class Plato {\n  /**\n   * @param nombrePlato Nombre del plato.\n   * @param alimentos Array de pares [alimento, cantidad (en gramos)].\n   * @param categoria Categoría a la que pertenece el plato.\n   */\n  private precio: number = 0;\n  private macronutrientes_plato: Macronutrientes;\n  constructor(private nombrePlato: string, private alimentos: [Alimento, number][],\n    private categoria: Categoria) {\n      this.macronutrientes_plato = this.calculoMacronutrientes();\n      this.precio = this.calculoPrecio();\n  }\n\n  /**\n   * Obtiene el nombre del alimento.\n   * @returns Nombre del alimento.\n   */\n  getNombrePlato() {\n    return this.nombrePlato;\n  }\n\n  /**\n   * Obtiene la lista de alimentos y/o ingredientes que lo componen.\n   * @returns Lista de alimentos.\n   */\n  getAlimentos() {\n    return this.alimentos;\n  }\n\n  /**\n   * Obtiene el nombre de la categoría del plato.\n   * @returns Nombre de la categoría del plato.\n   */\n  getCategoria() {\n    return this.categoria;\n  }\n\n  /**\n   * Obtiene los macronutrientes en conjunto del plato.\n   * @returns Cantidad de macronutrientes del plato.\n   */\n  getMacronutrientesPlato() {\n    return this.macronutrientes_plato;\n  }\n\n  /**\n   * Obtiene el precio del plato en función a los ingredientes utilizados y su cantidad.\n   * @returns Precio del plato.\n   */\n  getPrecio() {\n    return this.precio;\n  }\n\n  /**\n   * Realiza el cálculo de los macronutrientes del plato en base a la cantidad de cada alimento.\n   * @returns Macronutrientes del plato.\n   */\n  calculoMacronutrientes() {\n    let resultado: Macronutrientes = {carbohidratos: 0, proteinas: 0, lipidos: 0};\n    this.alimentos.forEach((elemento) => {\n      // Calculamos en función a la cantidad utilizada\n      resultado.carbohidratos += (elemento[0].getMacronutrientes().carbohidratos * elemento[1]) / 100;\n      resultado.lipidos += (elemento[0].getMacronutrientes().lipidos * elemento[1]) / 100;\n      resultado.proteinas += (elemento[0].getMacronutrientes().proteinas * elemento[1]) / 100;\n    });\n    return resultado;\n  }\n\n  /**\n   * Realiza el cálculo del precio en función a la cantidad utilizada de cada alimento.\n   * @return Precio (Euros).\n   */ \n  calculoPrecio(): number {\n    let sumatorio: number = 0;\n    this.alimentos.forEach((elemento) => {\n      const precio = elemento[0].getPrecio();\n      const precioGramo = (precio / 1000) * elemento[1];\n      sumatorio += precioGramo;\n    })\n    return sumatorio;\n  }\n\n  /**\n   * Calcula el grupo de alimento predominante, es decir, al grupo de alimentos que \n   * más aparece entre los ingredientes del plato\n   * @return El grupo más repetido.\n   */\n  calculoGrupoPredominante() {\n    this.alimentos.forEach((elemento) => {\n      const grupo = elemento[0].getGrupo();\n      let contadorAlimentos: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      switch (grupo) {\n        case 'CARNES':\n          contadorAlimentos[0]++;\n          if (contadorAlimentos[0] >= this.alimentos.length / 2)\n            return 'CARNES';\n          break;\n        case 'PESCADOS':\n          contadorAlimentos[1]++;\n          if (contadorAlimentos[1] >= this.alimentos.length / 2)\n            return 'PESCADOS';\n          break;\n        case 'HUEVOS':\n          contadorAlimentos[2]++;\n          if (contadorAlimentos[2] >= this.alimentos.length / 2)\n            return 'HUEVOS';\n          break;\n        case 'TOFU':\n          contadorAlimentos[3]++;\n          if (contadorAlimentos[3] >= this.alimentos.length / 2)\n            return 'TOFU';\n          break;\n        case 'FRUTOS_SECOS':\n          contadorAlimentos[4]++;\n          if (contadorAlimentos[4] >= this.alimentos.length / 2)\n            return 'FRUTOS_SECOS';\n          break;\n        case 'SEMILLAS':\n          contadorAlimentos[5]++;\n          if (contadorAlimentos[5] >= this.alimentos.length / 2)\n            return 'SEMILLAS';\n          break;\n        case 'LEGUMBRES':\n          contadorAlimentos[6]++;\n          if (contadorAlimentos[6] >= this.alimentos.length / 2)\n            return 'LEGUMBRES';\n          break;\n        case 'VERDURAS':\n          contadorAlimentos[7]++;\n          if (contadorAlimentos[7] >= this.alimentos.length / 2)\n            return 'VERDURAS';\n          break;\n        case 'HORTALIZAS':\n          contadorAlimentos[8]++;\n          if (contadorAlimentos[8] >= this.alimentos.length / 2)\n            return 'HORTALIZAS';\n          break;\n        case 'LACTEOS':\n          contadorAlimentos[9]++;\n          if (contadorAlimentos[9] >= this.alimentos.length / 2)\n            return 'LACTEOS';\n          break;\n        case 'CEREALES':\n          contadorAlimentos[10]++;\n          if (contadorAlimentos[10] >= this.alimentos.length / 2)\n            return 'CEREALES';\n          break;\n        case 'FRUTAS':\n          contadorAlimentos[11]++;\n          if (contadorAlimentos[11] >= this.alimentos.length / 2)\n            return 'FRUTAS';\n          break;\n        case 'PROCESADOS':\n          contadorAlimentos[12]++;\n          if (contadorAlimentos[12] >= this.alimentos.length / 2)\n            return 'PROCESADOS';\n          break;\n        default:\n          throw new Error(\"Error al calcular el grupo predominante.\");\n          break;\n      }\n      return 'MIX';\n    });\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"60c6c966350d106ef97902ec3b8f0ad384d7e23a","contentHash":"2839b3ffa1be94896ece522f4cfaade5afb85e827f1f774921980d6d1b53102b"},"/home/usuario/dsi/practica7/src/menu.ts":{"path":"/home/usuario/dsi/practica7/src/menu.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":9,"column":8},"end":{"line":9,"column":37}},"3":{"start":{"line":10,"column":8},"end":{"line":10,"column":39}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":24}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":30}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":43}},"7":{"start":{"line":21,"column":8},"end":{"line":23,"column":11}},"8":{"start":{"line":22,"column":12},"end":{"line":22,"column":43}},"9":{"start":{"line":24,"column":29},"end":{"line":24,"column":30}},"10":{"start":{"line":25,"column":28},"end":{"line":25,"column":29}},"11":{"start":{"line":26,"column":28},"end":{"line":26,"column":29}},"12":{"start":{"line":27,"column":27},"end":{"line":27,"column":28}},"13":{"start":{"line":29,"column":8},"end":{"line":43,"column":11}},"14":{"start":{"line":30,"column":12},"end":{"line":30,"column":52}},"15":{"start":{"line":31,"column":12},"end":{"line":42,"column":13}},"16":{"start":{"line":32,"column":16},"end":{"line":32,"column":35}},"17":{"start":{"line":34,"column":17},"end":{"line":42,"column":13}},"18":{"start":{"line":35,"column":16},"end":{"line":35,"column":34}},"19":{"start":{"line":37,"column":17},"end":{"line":42,"column":13}},"20":{"start":{"line":38,"column":16},"end":{"line":38,"column":34}},"21":{"start":{"line":40,"column":17},"end":{"line":42,"column":13}},"22":{"start":{"line":41,"column":16},"end":{"line":41,"column":33}},"23":{"start":{"line":44,"column":23},"end":{"line":44,"column":84}},"24":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"25":{"start":{"line":46,"column":12},"end":{"line":46,"column":89}},"26":{"start":{"line":54,"column":8},"end":{"line":54,"column":31}},"27":{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},"28":{"start":{"line":68,"column":37},"end":{"line":68,"column":83}},"29":{"start":{"line":69,"column":8},"end":{"line":73,"column":11}},"30":{"start":{"line":70,"column":12},"end":{"line":70,"column":100}},"31":{"start":{"line":71,"column":12},"end":{"line":71,"column":92}},"32":{"start":{"line":72,"column":12},"end":{"line":72,"column":88}},"33":{"start":{"line":74,"column":8},"end":{"line":74,"column":38}},"34":{"start":{"line":83,"column":35},"end":{"line":83,"column":37}},"35":{"start":{"line":84,"column":26},"end":{"line":84,"column":28}},"36":{"start":{"line":86,"column":8},"end":{"line":93,"column":11}},"37":{"start":{"line":87,"column":12},"end":{"line":91,"column":15}},"38":{"start":{"line":88,"column":16},"end":{"line":88,"column":70}},"39":{"start":{"line":94,"column":27},"end":{"line":94,"column":103}},"40":{"start":{"line":94,"column":65},"end":{"line":94,"column":102}},"41":{"start":{"line":95,"column":8},"end":{"line":95,"column":26}},"42":{"start":{"line":102,"column":26},"end":{"line":102,"column":27}},"43":{"start":{"line":103,"column":8},"end":{"line":105,"column":11}},"44":{"start":{"line":104,"column":12},"end":{"line":104,"column":47}},"45":{"start":{"line":106,"column":8},"end":{"line":106,"column":27}},"46":{"start":{"line":109,"column":0},"end":{"line":109,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":57},"end":{"line":48,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":28},"end":{"line":21,"column":29}},"loc":{"start":{"line":21,"column":41},"end":{"line":23,"column":9}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":33},"end":{"line":29,"column":34}},"loc":{"start":{"line":29,"column":47},"end":{"line":43,"column":9}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":20},"end":{"line":55,"column":5}},"line":53},"4":{"name":"(anonymous_4)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":16},"end":{"line":62,"column":5}},"line":60},"5":{"name":"(anonymous_5)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":32},"end":{"line":75,"column":5}},"line":67},"6":{"name":"(anonymous_6)","decl":{"start":{"line":69,"column":33},"end":{"line":69,"column":34}},"loc":{"start":{"line":69,"column":47},"end":{"line":73,"column":9}},"line":69},"7":{"name":"(anonymous_7)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":25},"end":{"line":96,"column":5}},"line":82},"8":{"name":"(anonymous_8)","decl":{"start":{"line":86,"column":33},"end":{"line":86,"column":34}},"loc":{"start":{"line":86,"column":48},"end":{"line":93,"column":9}},"line":86},"9":{"name":"(anonymous_9)","decl":{"start":{"line":87,"column":45},"end":{"line":87,"column":46}},"loc":{"start":{"line":87,"column":63},"end":{"line":91,"column":13}},"line":87},"10":{"name":"(anonymous_10)","decl":{"start":{"line":94,"column":55},"end":{"line":94,"column":56}},"loc":{"start":{"line":94,"column":65},"end":{"line":94,"column":102}},"line":94},"11":{"name":"(anonymous_11)","decl":{"start":{"line":101,"column":4},"end":{"line":101,"column":5}},"loc":{"start":{"line":101,"column":20},"end":{"line":107,"column":5}},"line":101},"12":{"name":"(anonymous_12)","decl":{"start":{"line":103,"column":33},"end":{"line":103,"column":34}},"loc":{"start":{"line":103,"column":46},"end":{"line":105,"column":9}},"line":103}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":12},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":42,"column":13}},{"start":{"line":31,"column":12},"end":{"line":42,"column":13}}],"line":31},"1":{"loc":{"start":{"line":34,"column":17},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":34,"column":17},"end":{"line":42,"column":13}},{"start":{"line":34,"column":17},"end":{"line":42,"column":13}}],"line":34},"2":{"loc":{"start":{"line":37,"column":17},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":37,"column":17},"end":{"line":42,"column":13}},{"start":{"line":37,"column":17},"end":{"line":42,"column":13}}],"line":37},"3":{"loc":{"start":{"line":40,"column":17},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":40,"column":17},"end":{"line":42,"column":13}},{"start":{"line":40,"column":17},"end":{"line":42,"column":13}}],"line":40},"4":{"loc":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},{"start":{"line":45,"column":8},"end":{"line":47,"column":9}}],"line":45}},"s":{"0":1,"1":1,"2":7,"3":7,"4":7,"5":7,"6":7,"7":7,"8":14,"9":7,"10":7,"11":7,"12":7,"13":7,"14":21,"15":21,"16":7,"17":14,"18":6,"19":8,"20":7,"21":1,"22":1,"23":7,"24":7,"25":0,"26":9,"27":7,"28":3,"29":3,"30":9,"31":9,"32":9,"33":3,"34":1,"35":1,"36":1,"37":3,"38":9,"39":1,"40":9,"41":1,"42":1,"43":1,"44":3,"45":1,"46":1},"f":{"0":7,"1":14,"2":21,"3":9,"4":7,"5":3,"6":9,"7":1,"8":3,"9":9,"10":9,"11":1,"12":3},"b":{"0":[7,14],"1":[6,8],"2":[7,1],"3":[1,0],"4":[0,7]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practica7/src/menu.ts","sources":["/home/usuario/dsi/practica7/src/menu.ts"],"names":[],"mappings":"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","sourcesContent":["import { Alimento } from \"./alimento\";\nimport { Macronutrientes } from \"./alimento\"\nimport { Grupo } from \"./alimento\";\nimport { Plato } from \"./plato\";\nimport { Categoria } from \"./plato\";\n\n/*\n * Esta es la clase Menu.\n */\nexport class Menu {\n  /**\n   * Constructor de la clase Menu. Comprueba que existan al menos 3 platos de 3 categorías \n   * distintas (Entrante, Primero, Segundo y Postre) en cada Menú. Si no los hay, devuelve un error.\n   * @param nombreMenu Nombre del plato en cuestión.\n   * @param primerPlato Primer plato del menú\n   * @param demasPlatos Array donde se almacenan el resto de los platos del menú.\n   */\n  private precio: number = 0;\n  private arrayPlatos: Plato[] = [];\n  constructor(private nombreMenu: string, private primerPlato: Plato, ...demasPlatos: Plato[]) {\n    this.arrayPlatos.push(primerPlato);\n    demasPlatos.forEach((element) => {\n      this.arrayPlatos.push(element);\n    });\n\n    let existeEntrante: number = 0;\n    let existePrimero: number = 0;\n    let existeSegundo: number = 0;\n    let existePostre: number = 0;\n    let grupoElemento: Categoria;\n    this.arrayPlatos.forEach((elemento) => {\n      grupoElemento = elemento.getCategoria();\n      if (grupoElemento === 'ENTRANTE') {\n        existeEntrante = 1;\n      } else if (grupoElemento === 'PRIMERO') {\n        existePrimero = 1;\n      } else if (grupoElemento === 'SEGUNDO') {\n        existeSegundo = 1;\n      } else if (grupoElemento === 'POSTRE') {\n        existePostre = 1;\n      }\n    });\n    const counts = existeEntrante + existePrimero + existeSegundo + existePostre;\n    if (counts < 3) {\n      throw new Error(\"Los menús deben tener 3 categorías de platos como mínimo.\");\n    }\n  }\n\n  /**\n   * Obtiene el nombre del menú.\n   * @returns Nombre del menú.\n   */\n  getNombreMenu() {\n    return this.nombreMenu;\n  }\n\n  /**\n   * Obtiene los platos que componen el menú.\n   * @returns Listado de los platos del menú.\n   */\n  getPlatos(){\n    return this.arrayPlatos;\n  }\n\n  /**\n   * Obtiene la composición nutricional del menú, obteníendola plato por plato.\n   * @returns Cantidad total de carbohidratos, proteínas y lípidos del menú.\n   */\n  getComposicionNutricional() {\n    let composicionNutricional: Macronutrientes = {carbohidratos: 0, proteinas: 0, lipidos: 0};\n    this.arrayPlatos.forEach((elemento) => {\n      composicionNutricional.carbohidratos += elemento.calculoMacronutrientes().carbohidratos;\n      composicionNutricional.proteinas += elemento.calculoMacronutrientes().proteinas;\n      composicionNutricional.lipidos += elemento.calculoMacronutrientes().lipidos;\n    });\n    return composicionNutricional;\n  }\n  \n  /**\n   * Obtiene los grupos de alimentos que componen el menú. Almacena todos los grupos de \n   * todos los alimentos de todos los platos y al final filtrar para tener una copia de\n   * cada. Este listado final de grupos únicos es lo que devuelve.\n   * @returns Listado de grupos de alimentos (únicos) de todo el menú.\n   */\n  getGruposAlimentos(): Grupo[] {\n    let arrayGruposAlimentos: Grupo[] = [];\n    let platosGrupo: [Alimento, number][] = [];\n    //let valorGrupo: any;\n    this.arrayPlatos.forEach((cadaPlato) => {\n      cadaPlato.getAlimentos().forEach((cadaAlimento) => {\n        arrayGruposAlimentos.push(cadaAlimento[0].getGrupo());\n        //valorGrupo = alimento[0].getGrupo();\n        //arrayGruposAlimentos[valorGrupo] = 1 + (arrayGruposAlimentos[valorGrupo] || 0)\n      });;\n    });\n    const arrayFinal: Grupo[] = arrayGruposAlimentos.filter((n, i) => arrayGruposAlimentos.indexOf(n) === i);\n    return arrayFinal;\n  }\n  \n  /**\n   * Obtiene el precio del menú sumando los precios de sus platos.\n   * @returns Precio (en euros) del menú.\n   */\n  getPrecioMenu(): number {\n    let precioTotal: number = 0;\n    this.arrayPlatos.forEach((element) => {\n      precioTotal += element.getPrecio();\n    });\n    return precioTotal;\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0b2c522c9432f0bc3490a4f4319325177b9362a5","contentHash":"aebbe32ea6951375a070c3255a516ba9a923bf89652ab7a0e08fd278ae193c71"},"/home/usuario/dsi/practica7/src/carta.ts":{"path":"/home/usuario/dsi/practica7/src/carta.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":10,"column":8},"end":{"line":10,"column":39}},"4":{"start":{"line":17,"column":8},"end":{"line":17,"column":28}},"5":{"start":{"line":18,"column":8},"end":{"line":18,"column":37}},"6":{"start":{"line":19,"column":8},"end":{"line":19,"column":35}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":53}},"8":{"start":{"line":30,"column":24},"end":{"line":30,"column":66}},"9":{"start":{"line":31,"column":8},"end":{"line":31,"column":39}},"10":{"start":{"line":38,"column":8},"end":{"line":38,"column":32}},"11":{"start":{"line":45,"column":8},"end":{"line":45,"column":30}},"12":{"start":{"line":52,"column":8},"end":{"line":52,"column":39}},"13":{"start":{"line":59,"column":25},"end":{"line":59,"column":27}},"14":{"start":{"line":60,"column":8},"end":{"line":60,"column":78}},"15":{"start":{"line":61,"column":8},"end":{"line":61,"column":26}},"16":{"start":{"line":69,"column":33},"end":{"line":69,"column":35}},"17":{"start":{"line":70,"column":8},"end":{"line":74,"column":11}},"18":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"19":{"start":{"line":72,"column":16},"end":{"line":72,"column":47}},"20":{"start":{"line":75,"column":8},"end":{"line":75,"column":32}},"21":{"start":{"line":83,"column":35},"end":{"line":83,"column":37}},"22":{"start":{"line":84,"column":8},"end":{"line":88,"column":11}},"23":{"start":{"line":85,"column":12},"end":{"line":87,"column":13}},"24":{"start":{"line":86,"column":16},"end":{"line":86,"column":53}},"25":{"start":{"line":89,"column":8},"end":{"line":95,"column":11}},"26":{"start":{"line":90,"column":12},"end":{"line":94,"column":15}},"27":{"start":{"line":91,"column":16},"end":{"line":93,"column":17}},"28":{"start":{"line":92,"column":20},"end":{"line":92,"column":58}},"29":{"start":{"line":96,"column":8},"end":{"line":96,"column":34}},"30":{"start":{"line":104,"column":29},"end":{"line":104,"column":31}},"31":{"start":{"line":105,"column":8},"end":{"line":105,"column":54}},"32":{"start":{"line":106,"column":8},"end":{"line":106,"column":55}},"33":{"start":{"line":107,"column":8},"end":{"line":107,"column":28}},"34":{"start":{"line":110,"column":0},"end":{"line":110,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":60},"end":{"line":21,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":41},"end":{"line":32,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":21},"end":{"line":39,"column":5}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":18},"end":{"line":46,"column":5}},"line":44},"4":{"name":"(anonymous_4)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":26},"end":{"line":53,"column":5}},"line":51},"5":{"name":"(anonymous_5)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":15},"end":{"line":62,"column":5}},"line":58},"6":{"name":"(anonymous_6)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":27},"end":{"line":76,"column":5}},"line":68},"7":{"name":"(anonymous_7)","decl":{"start":{"line":70,"column":31},"end":{"line":70,"column":32}},"loc":{"start":{"line":70,"column":44},"end":{"line":74,"column":9}},"line":70},"8":{"name":"(anonymous_8)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":29},"end":{"line":97,"column":5}},"line":82},"9":{"name":"(anonymous_9)","decl":{"start":{"line":84,"column":40},"end":{"line":84,"column":41}},"loc":{"start":{"line":84,"column":57},"end":{"line":88,"column":9}},"line":84},"10":{"name":"(anonymous_10)","decl":{"start":{"line":89,"column":31},"end":{"line":89,"column":32}},"loc":{"start":{"line":89,"column":45},"end":{"line":95,"column":9}},"line":89},"11":{"name":"(anonymous_11)","decl":{"start":{"line":90,"column":41},"end":{"line":90,"column":42}},"loc":{"start":{"line":90,"column":59},"end":{"line":94,"column":13}},"line":90},"12":{"name":"(anonymous_12)","decl":{"start":{"line":103,"column":4},"end":{"line":103,"column":5}},"loc":{"start":{"line":103,"column":28},"end":{"line":108,"column":5}},"line":103}},"branchMap":{"0":{"loc":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"type":"if","locations":[{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},{"start":{"line":71,"column":12},"end":{"line":73,"column":13}}],"line":71},"1":{"loc":{"start":{"line":85,"column":12},"end":{"line":87,"column":13}},"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":87,"column":13}},{"start":{"line":85,"column":12},"end":{"line":87,"column":13}}],"line":85},"2":{"loc":{"start":{"line":91,"column":16},"end":{"line":93,"column":17}},"type":"if","locations":[{"start":{"line":91,"column":16},"end":{"line":93,"column":17}},{"start":{"line":91,"column":16},"end":{"line":93,"column":17}}],"line":91}},"s":{"0":1,"1":1,"2":1,"3":4,"4":4,"5":4,"6":4,"7":4,"8":1,"9":1,"10":1,"11":4,"12":2,"13":1,"14":1,"15":1,"16":3,"17":3,"18":6,"19":2,"20":3,"21":3,"22":3,"23":3,"24":2,"25":3,"26":6,"27":18,"28":1,"29":3,"30":1,"31":1,"32":1,"33":1,"34":1},"f":{"0":4,"1":1,"2":1,"3":4,"4":2,"5":1,"6":3,"7":6,"8":3,"9":3,"10":6,"11":18,"12":1},"b":{"0":[2,4],"1":[2,1],"2":[1,17]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practica7/src/carta.ts","sources":["/home/usuario/dsi/practica7/src/carta.ts"],"names":[],"mappings":";;;AAKA,iCAA8B;AAG9B;;GAEG;AACH,MAAa,KAAK;IAShB,YAAoB,WAAmB,EAAE,SAAiB,EAAE,kBAA2B;QAAnE,gBAAW,GAAX,WAAW,CAAQ;QARvC;;;;;WAKG;QACK,cAAS,GAAW,EAAE,CAAC;QACvB,uBAAkB,GAAY,EAAE,CAAC;QAEvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC,CAAC,gCAAgC;IAChF,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,MAAc,EAAE,MAAa,EAAE,GAAG,MAAe;QACzD,IAAI,SAAS,GAAG,IAAI,WAAI,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,IAAI,UAAU,GAAmB,EAAE,CAAC;QACpC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACtE,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,UAAkB;QAC3B,MAAM,gBAAgB,GAAW,EAAE,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;gBACnD,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,WAAmB;QAC7B,MAAM,kBAAkB,GAAY,EAAE,CAAC;QACvC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YAC9C,IAAI,WAAW,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzD,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;gBAC5C,IAAI,YAAY,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC1D,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;iBACvC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,MAAc;QAC5B,MAAM,YAAY,GAAmB,EAAE,CAAC;QACxC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9C,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/C,OAAO,YAAY,CAAC;IACtB,CAAC;CACF;AA5GD,sBA4GC","sourcesContent":["import { Alimento } from \"./alimento\";\nimport { Macronutrientes } from \"./alimento\"\nimport { Grupo } from \"./alimento\";\nimport { Plato } from \"./plato\";\nimport { Categoria } from \"./plato\";\nimport { Menu } from \"./menu\";\nimport * as inquirer from 'inquirer';\n\n/*\n * Esta es la clase Carta.\n */\nexport class Carta {\n  /**\n   * Constructor de la clase Carta.\n   * @param nombreCarta Nombre de la carta.\n   * @param arrayMenu Todos los menús que contiene la carta.\n   * @param arrayPlatosSueltos Todos los platos sueltos para que el comensales diseñen su propio menú.\n   */\n  private arrayMenu: Menu[] = [];\n  private arrayPlatosSueltos: Plato[] = [];\n  constructor(private nombreCarta: string, arrayMenu: Menu[], arrayPlatosSueltos: Plato[]) {\n    this.arrayMenu = arrayMenu;\n    this.arrayPlatosSueltos = arrayPlatosSueltos; // si no, se queja que no existe\n  }\n\n  /**\n   * Permite añadir nuevos menús creados por los comensales, combinando\n   * platos sueltos ya existentes.\n   * @param nombre Nombre del nuevo menú.\n   * @param plato1 Nombre del primer plato.\n   * @param platos Nombre de los demás platos.\n   */\n  nuevoMenu(nombre: string, plato1: Plato, ...platos: Plato[]) {\n    let nuevoMenu = new Menu(nombre, plato1, ...platos);\n    this.arrayMenu.push(nuevoMenu);\n  }\n\n  /**\n   * Obtiene el nombre de la Carta.\n   * @returns Nombre de la carta.\n   */\n  getNombreCarta(): string {\n    return this.nombreCarta;\n  }\n\n  /**\n   * Obtiene el array de los Menús de la carta.\n   * @returns Array de menús.\n   */\n  getAllMenus(): Menu[] {\n    return this.arrayMenu;\n  }\n\n  /**\n   * Obtiene el array de los Platos sueltos de la carta.\n   * @returns Array de Platos Sueltos.\n   */\n  getAllPlatosSueltos(): Plato[] {\n    return this.arrayPlatosSueltos;\n  }\n\n  /**\n   * Obtiene la carta completa del restaurante (menús y platos sueltos).\n   * @returns Array con menús y platos sueltos.\n   */\n  getCarta() {\n    let arrayCarta: (Menu|Plato)[] = [];\n    arrayCarta.push(...this.getAllMenus(), ...this.getAllPlatosSueltos());\n    return arrayCarta;\n  }\n\n  /**\n   * Función que busca el nombre indicado entre los menús y \n   * devuelve todas las coincidencias.\n   * @returns Array de todos los menús que contengan esa cadena en su nombre.\n   */\n  searchMenu(nombreMenu: string): Menu[] {\n    const arrayMatchedMenu: Menu[] = [];\n    this.arrayMenu.forEach((element) => {\n      if (element.getNombreMenu().search(nombreMenu) > -1) {\n        arrayMatchedMenu.push(element);\n      }\n    });\n    return arrayMatchedMenu;\n  }\n\n  /**\n   * Función que busca el nombre indicado entre todos los Platos, es decir,\n   * entre los Platos sueltos y los Platos de un Menú.\n   * @returns Array de Platos que contengan esa cadena en su nombre.\n   */\n  searchPlato(nombrePlato: string): Plato[] {\n    const arrayMatchedPlatos: Plato[] = [];\n    this.arrayPlatosSueltos.forEach((platoSuelto) => {\n      if (platoSuelto.getNombrePlato().search(nombrePlato) > -1) {\n        arrayMatchedPlatos.push(platoSuelto);\n      }\n    });\n    this.arrayMenu.forEach((cadaMenu) => {\n      cadaMenu.getPlatos().forEach((platoDelMenu) => {\n        if (platoDelMenu.getNombrePlato().search(nombrePlato) > -1) {\n          arrayMatchedPlatos.push(platoDelMenu);\n        }\n      });\n    });\n    return arrayMatchedPlatos;\n  }\n\n  /**\n   * Función que busca el string entre todos los nombres de todos los\n   * menús y todos los platos de la carta.\n   * @returns Array de todas las coincidencias (sean Menús o Platos).\n   */\n  searchEnGeneral(nombre: string): (Menu|Plato)[] {\n    const arrayMatched: (Menu|Plato)[] = [];\n    arrayMatched.push(...this.searchMenu(nombre));\n    arrayMatched.push(...this.searchPlato(nombre));\n    return arrayMatched;\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"48816ef903b99eb6c91033a38235d50933ddf83e","contentHash":"0e7fabe4153e9a552e33231e08062c7e3f356f5170b3a95299b7b41099ef4e48"},"/home/usuario/dsi/practica7/src/comanda.ts":{"path":"/home/usuario/dsi/practica7/src/comanda.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":36}},"3":{"start":{"line":10,"column":8},"end":{"line":10,"column":27}},"4":{"start":{"line":16,"column":8},"end":{"line":16,"column":26}},"5":{"start":{"line":23,"column":8},"end":{"line":23,"column":28}},"6":{"start":{"line":31,"column":29},"end":{"line":31,"column":62}},"7":{"start":{"line":39,"column":8},"end":{"line":41,"column":11}},"8":{"start":{"line":40,"column":12},"end":{"line":40,"column":55}},"9":{"start":{"line":49,"column":30},"end":{"line":49,"column":65}},"10":{"start":{"line":50,"column":8},"end":{"line":52,"column":11}},"11":{"start":{"line":51,"column":12},"end":{"line":51,"column":56}},"12":{"start":{"line":59,"column":8},"end":{"line":59,"column":51}},"13":{"start":{"line":66,"column":8},"end":{"line":66,"column":52}},"14":{"start":{"line":73,"column":31},"end":{"line":73,"column":33}},"15":{"start":{"line":74,"column":8},"end":{"line":86,"column":11}},"16":{"start":{"line":75,"column":12},"end":{"line":75,"column":34}},"17":{"start":{"line":76,"column":12},"end":{"line":85,"column":13}},"18":{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},"19":{"start":{"line":78,"column":20},"end":{"line":78,"column":50}},"20":{"start":{"line":81,"column":17},"end":{"line":85,"column":13}},"21":{"start":{"line":82,"column":16},"end":{"line":84,"column":17}},"22":{"start":{"line":83,"column":20},"end":{"line":83,"column":50}},"23":{"start":{"line":87,"column":8},"end":{"line":87,"column":30}},"24":{"start":{"line":94,"column":29},"end":{"line":94,"column":64}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":36}},"26":{"start":{"line":98,"column":8},"end":{"line":116,"column":11}},"27":{"start":{"line":100,"column":12},"end":{"line":100,"column":54}},"28":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"29":{"start":{"line":102,"column":16},"end":{"line":102,"column":46}},"30":{"start":{"line":119,"column":0},"end":{"line":119,"column":26}},"31":{"start":{"line":132,"column":0},"end":{"line":136,"column":30}},"32":{"start":{"line":133,"column":4},"end":{"line":133,"column":50}},"33":{"start":{"line":134,"column":4},"end":{"line":134,"column":41}},"34":{"start":{"line":135,"column":4},"end":{"line":135,"column":31}},"35":{"start":{"line":139,"column":4},"end":{"line":139,"column":20}},"36":{"start":{"line":140,"column":4},"end":{"line":145,"column":7}},"37":{"start":{"line":149,"column":4},"end":{"line":149,"column":20}},"38":{"start":{"line":151,"column":20},"end":{"line":156,"column":6}},"39":{"start":{"line":157,"column":4},"end":{"line":168,"column":5}},"40":{"start":{"line":161,"column":12},"end":{"line":161,"column":18}},"41":{"start":{"line":164,"column":12},"end":{"line":164,"column":18}},"42":{"start":{"line":167,"column":12},"end":{"line":167,"column":18}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":23},"end":{"line":17,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":21},"end":{"line":24,"column":5}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":40},"end":{"line":42,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":39,"column":29},"end":{"line":39,"column":30}},"loc":{"start":{"line":39,"column":42},"end":{"line":41,"column":9}},"line":39},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":43},"end":{"line":53,"column":5}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":50,"column":30},"end":{"line":50,"column":31}},"loc":{"start":{"line":50,"column":43},"end":{"line":52,"column":9}},"line":50},"6":{"name":"(anonymous_6)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":18},"end":{"line":60,"column":5}},"line":58},"7":{"name":"(anonymous_7)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":19},"end":{"line":67,"column":5}},"line":65},"8":{"name":"(anonymous_8)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":31},"end":{"line":88,"column":5}},"line":72},"9":{"name":"(anonymous_9)","decl":{"start":{"line":74,"column":32},"end":{"line":74,"column":33}},"loc":{"start":{"line":74,"column":46},"end":{"line":86,"column":9}},"line":74},"10":{"name":"(anonymous_10)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":45},"end":{"line":117,"column":5}},"line":93},"11":{"name":"(anonymous_11)","decl":{"start":{"line":98,"column":29},"end":{"line":98,"column":30}},"loc":{"start":{"line":98,"column":43},"end":{"line":116,"column":9}},"line":98},"12":{"name":"(anonymous_12)","decl":{"start":{"line":132,"column":1},"end":{"line":132,"column":2}},"loc":{"start":{"line":132,"column":20},"end":{"line":136,"column":1}},"line":132},"13":{"name":"promptSecond","decl":{"start":{"line":138,"column":15},"end":{"line":138,"column":27}},"loc":{"start":{"line":138,"column":30},"end":{"line":146,"column":1}},"line":138},"14":{"name":"promptComanda","decl":{"start":{"line":148,"column":9},"end":{"line":148,"column":22}},"loc":{"start":{"line":148,"column":25},"end":{"line":169,"column":1}},"line":148}},"branchMap":{"0":{"loc":{"start":{"line":76,"column":12},"end":{"line":85,"column":13}},"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":85,"column":13}},{"start":{"line":76,"column":12},"end":{"line":85,"column":13}}],"line":76},"1":{"loc":{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},"type":"if","locations":[{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},{"start":{"line":77,"column":16},"end":{"line":79,"column":17}}],"line":77},"2":{"loc":{"start":{"line":81,"column":17},"end":{"line":85,"column":13}},"type":"if","locations":[{"start":{"line":81,"column":17},"end":{"line":85,"column":13}},{"start":{"line":81,"column":17},"end":{"line":85,"column":13}}],"line":81},"3":{"loc":{"start":{"line":82,"column":16},"end":{"line":84,"column":17}},"type":"if","locations":[{"start":{"line":82,"column":16},"end":{"line":84,"column":17}},{"start":{"line":82,"column":16},"end":{"line":84,"column":17}}],"line":82},"4":{"loc":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},{"start":{"line":101,"column":12},"end":{"line":103,"column":13}}],"line":101},"5":{"loc":{"start":{"line":136,"column":3},"end":{"line":136,"column":28}},"type":"binary-expr","locations":[{"start":{"line":136,"column":3},"end":{"line":136,"column":10}},{"start":{"line":136,"column":15},"end":{"line":136,"column":27}}],"line":136},"6":{"loc":{"start":{"line":157,"column":4},"end":{"line":168,"column":5}},"type":"switch","locations":[{"start":{"line":158,"column":8},"end":{"line":161,"column":18}},{"start":{"line":162,"column":8},"end":{"line":164,"column":18}},{"start":{"line":165,"column":8},"end":{"line":167,"column":18}}],"line":157}},"s":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":2,"13":0,"14":1,"15":1,"16":2,"17":2,"18":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":1,"32":1,"33":1,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},"f":{"0":2,"1":2,"2":1,"3":1,"4":1,"5":1,"6":2,"7":0,"8":1,"9":2,"10":1,"11":0,"12":1,"13":0,"14":0},"b":{"0":[1,0],"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[1,1],"6":[0,0,0]},"inputSourceMap":{"version":3,"file":"/home/usuario/dsi/practica7/src/comanda.ts","sources":["/home/usuario/dsi/practica7/src/comanda.ts"],"names":[],"mappings":"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","sourcesContent":["import { Carta } from \"./carta\";\nimport { Plato } from \"./plato\";\nimport { Menu } from \"./menu\";\n\nconst inquirer = require('inquirer');\n\n/**\n * Esta es la clase Comanda. \n */\nexport class Comanda {\n  /**\n   * Constructor de la clase Comanda.\n   * @param carta Nombre de la carta.\n   */\n  // Comanda -> [Lo que pide, cantidad de lo que pide]\n  private comanda: [Menu|Plato, number][] = [];\n  constructor(private carta: Carta) { //, private arrayComanda: [Menu|Plato, number][]) {\n  }\n\n  /**\n   * Obtiene la comanda.\n   * @returns La comanda entera.\n   */\n  mostrarComanda() {\n    return this.comanda;\n  }\n  \n  /**\n   * Método que permite al cliente añadir un menú a la comanda\n   * @param nombreMenu El nombre del menú que quiere añadir a la comanda.\n   * @param cantidadMenu La cantidad de menús que quiere añadir a la comanda.\n   */\n  sumarMenu(nombreMenu: string, cantidadMenu: number) {\n    const matchedMenus = this.carta.searchMenu(nombreMenu);\n    // EN ESTE PUNTO, SI HAY CERO O MÁS DE DOS COINCIDENCIAS EN EL MENÚ \n    // preguntar al cliente con cuál de ellas se quiere quedar u ofrecerle buscar de nuevo. \n\n    /**\n     * Esto lo que hace es que todos los platos que coincidan con el nombre buscado,\n     * los añade igualmente a la comanda y en la misma cantidad.\n     * Así que HAY QUE ARREGLARLO.\n     */\n    matchedMenus.forEach((element) => {\n      this.comanda.push([element, cantidadMenu]);\n    });\n  }\n\n  /**\n   * Método que permite al cliente añadir un plato a la comanda\n   * @param nombrePlato El nombre del plato que quiere añadir a la comanda.\n   * @param cantidadPlato La cantidad de este tipo de platos que quiere añadir a la comanda.\n   */\n  sumarPlato(nombrePlato: string, cantidadPlato: number) {\n    const matchedPlatos = this.carta.searchPlato(nombrePlato);\n\n    matchedPlatos.forEach((element) => {\n      this.comanda.push([element, cantidadPlato]);\n    });\n  }\n\n  /**\n   * Función para deshacer el guardián de tipos.\n   * @returns True si el objeto es de clase Menu.\n   */\n  isMenu(myObj: any): myObj is Menu {\n    return myObj.getNombreMenu() !== undefined;\n  }\n\n  /**\n   * Función para deshacer el guardián de tipos.\n   * @returns True si el objeto es de clase Plato.\n   */\n  isPlato(myObj: any): myObj is Plato {\n    return myObj.getNombrePlato() !== undefined;\n  }\n\n  /**\n   * Método que permite encontrar una comanda deseada.\n   * @param nombre Nombre de la comanda a buscar.\n   */\n  encontrarEnComanda(nombre: string) {\n    const matchedResults: (Menu|Plato)[] = [];\n    this.comanda[0].forEach((elemento) => {\n      console.log(elemento);\n      if (this.isMenu(elemento)) {\n        if (elemento.getNombreMenu().search(nombre) > -1) {\n          matchedResults.push(elemento);\n        }\n      } else if (this.isPlato(elemento)) {\n        if (elemento.getNombrePlato().search(nombre) > -1) {\n          matchedResults.push(elemento);\n        }\n      }\n    });\n    return matchedResults;\n  }\n\n  /**\n   * Método que permite eliminar una comanda deseada.\n   * @param nombre Nombre de la comanda a eliminar.\n   */\n  quitarElemento(nombreMenu: string, cantidadMenu: number) {\n    const matchedMenus: (Menu|Plato)[] = this.encontrarEnComanda(nombreMenu);\n    console.table(matchedMenus);      // IMPRIMIR PARA COMPROBAR QUÉ ENCUENTRA PARA BORRAR\n    let index;\n    let valorObjeto: (Menu|Plato);\n    this.comanda.forEach((elemento) => {\n      //valorObjeto = elemento[0];\n      index = this.comanda.indexOf(elemento, 0);\n      if (index > -1) {\n        this.comanda.splice(index, 1);\n      }\n        /*\n      if (this.isMenu(element[0])) {\n        index = this.comanda.indexOf(element[0], 0);\n        if (index > -1) {\n          this.comanda.splice(index, 1);\n        }\n      } else if (this.isPlato(element[0]) {\n        index = this.comanda.indexOf(element[0], 0);\n        if (index > -1) {\n          this.comanda.splice(index, 1);\n        }\n      }*/\n    });\n  }\n}\n\n/*\n* 1: Visualizar la carta del restaurante: Para cada menú y/o plato, \n*   el cliente querrá poder observar toda la información que tiene \n*   (precio, ingredientes, composición nutricional y grupos de alimentos).\n*\n* 2: Realizar una comanda: El cliente podra: -> Elegir una comanda del menu preestablecido\n*                                            -> Podra crear un menu personalizado en base a la carta -> visualizar la carta\n*                                                                                                     -> Elegir platos y cantidad\n*                                            -> Podra modificar uno de los menu preestablecidos -> Eliminando platos\n*/\n\n//Esto enumarara las diferentes opciones del menu principal\nenum options{\n  Visualizar = \"Visualizar la Carta\",\n  Comanda = \"Hacer comanda\",\n  Salir = \"Salir\"\n}\n\n//Segundo Menu para el caso de  Comandas\nasync function promptSecond(): Promise<void> {\n  console.clear();\n  inquirer.prompt({\n    type: 'list',\n    name: 'segundarespuesta',\n    Message: '¿Que desea hacer ahora?',\n    choices: ''\n    \n  })\n}\n\n// Funcion principal del menu \nfunction promptComanda(){\n  console.clear();\n  //seria necesario el async si quisieramos ejecutar algo aqui a parte como la visualizacion de algo\n  const answers = inquirer.prompt({\n    type: 'list',\n    name: 'respuesta',\n    message: 'Seleccione una opcion:',\n    choices: Object.values(options)\n  });\n  \n  switch (answers[\"respuesta\"]) {\n    case options.Visualizar:\n      //Llamada a un funcion que devuelva la carta del restaurante \n      //let miCarta = new Carta(nombre,todos los menus de la carta, platos sueltos);\n      break;\n\n    case options.Comanda:\n      //Aqui va la funcion que ejecuta un menu interno que permite modificar o seleccionar un menu personalizado\n      break;\n    case options.Salir:\n      //salimos\n      break;\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a2ad7dfc75e9dff1a81d6c4815301a265d51bb14","contentHash":"1356228f1c5331c3f5b56851c8d03c5b6d790c7d0b85746322d180f081017de2"}}